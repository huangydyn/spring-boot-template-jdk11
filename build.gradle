buildscript {
    ext {
        springBootVersion = "2.6.1"
        junitVersion = "5.3.0"
        springCloudVersion = "2021.0.2"
    }
    repositories {
        mavenLocal()
        maven { url 'https://maven.aliyun.com/repository/public' }
        maven { url 'https://maven.aliyun.com/nexus/content/repositories/gradle-plugin'}
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("net.ltgt.gradle:gradle-apt-plugin:0.18")
    }
}

apply plugin: "pmd"
apply plugin: "java"
apply plugin: "checkstyle"
apply plugin: "maven-publish"
apply plugin: "org.springframework.boot"
apply plugin: "io.spring.dependency-management"
apply plugin: "jacoco"

ext {
    mapstructVersion = "1.3.0.Final"
    lombokVersion = "1.18.4"
    queryDslVersion = '4.1.3'
    restAssuredVersion = '4.1.2'
}

group = "template.app"
version = "1.0"

repositories {
    mavenLocal()
    maven { url 'https://maven.aliyun.com/repository/public' }
    maven { url 'https://jitpack.io' }
}

pmd {
    ruleSetFiles = files("config/pmd-ruleSets.xml")
    consoleOutput = true
    toolVersion = "6.9.0"
    sourceSets = [project.sourceSets.main]
    ruleSets = []
}

checkstyle {
    configFile = file("config/checkstyle.xml")
    toolVersion = "8.1"
    sourceSets = [project.sourceSets.main]
}

test {
    useJUnitPlatform()

    testLogging {
        events "PASSED", "FAILED", "SKIPPED"
    }
}

project.afterEvaluate {
    jacoco {
        toolVersion = "0.8.2"
    }

    def sourceFiles = files("./src/main/java")

    def classFiles = files(files("$buildDir/classes/java/main").files.collect {
        fileTree(dir: it, exclude: ['**/*Application.class',
                                    '**/entity/**',
                                    '**/model/**',
                                    '**/dto/**',
                                    '**/mappers/**',
                                    '**/*DTO.class',])
    })

    project.task(type: JacocoReport, "junitPlatformJacocoReport", {
        sourceDirectories.from = sourceFiles
        classDirectories.from = classFiles
        executionData fileTree("${buildDir}/jacoco", {
            includes = ['**/*.exec']
        })

        reports {
            xml.enabled false
            csv.enabled false
            html.enabled = true
            html.destination file("${buildDir}/reports/jacoco")
        }

    })

    project.task(type: JacocoCoverageVerification, "junitPlatformJacocoCoverageReport", {
        sourceDirectories.from = sourceFiles
        classDirectories.from = classFiles
        executionData fileTree("${buildDir}/jacoco", {
            includes = ['**/*.exec']
        })

        violationRules {
            rule {
                limit {
                    counter = "BRANCH"
                    minimum = 0.00
                }
                limit {
                    counter = "METHOD"
                    minimum = 0.00
                }
                limit {
                    counter = "LINE"
                    minimum = 0.00
                }
                limit {
                    counter = "CLASS"
                    minimum = 0
                }
            }
        }
    })

    test.finalizedBy junitPlatformJacocoReport, junitPlatformJacocoCoverageReport
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

dependencies {
    implementation("org.springframework.boot:spring-boot-starter-tomcat")
    implementation("org.springframework.boot:spring-boot-starter-actuator")
    implementation("org.springframework.cloud:spring-cloud-starter-openfeign")
    implementation("org.springframework.cloud:spring-cloud-starter-sleuth")
    implementation("io.github.openfeign:feign-okhttp:10.2.0")
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.boot:spring-boot-starter-aop")
    implementation("org.projectlombok:lombok:${lombokVersion}")
    implementation("net.logstash.logback:logstash-logback-encoder:5.2")
    implementation("io.springfox:springfox-boot-starter:3.0.0")
    implementation("com.google.guava:guava:27.0-jre")
    implementation("commons-io:commons-io:2.6")
    implementation("javax.validation:validation-api:2.0.1.Final")
    implementation("org.javassist:javassist:3.24.0-GA")
    implementation("javax.xml.bind:jaxb-api:2.3.1")
    implementation("org.mapstruct:mapstruct-jdk8:${mapstructVersion}", "org.projectlombok:lombok:${lombokVersion}")
    implementation("org.apache.commons:commons-lang3:3.9")
    implementation("com.fasterxml.jackson.datatype:jackson-datatype-joda:2.10.0")
    implementation("org.apache.commons:commons-pool2:2.7.0")

    annotationProcessor("javax.annotation:javax.annotation-api:1.3.2",
            "org.projectlombok:lombok:${lombokVersion}",
            "org.mapstruct:mapstruct-processor:${mapstructVersion}")

    testImplementation("org.springframework.boot:spring-boot-starter-test")
    testImplementation("com.github.sbrannen:spring-test-junit5:1.3.1")
    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testImplementation("org.junit.jupiter:junit-jupiter-params:${junitVersion}")
    testImplementation("org.mockito:mockito-core:2.23.0")
    testImplementation("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
    testImplementation("org.junit.vintage:junit-vintage-engine:${junitVersion}")
    testImplementation("io.rest-assured:rest-assured:${restAssuredVersion}")
    testImplementation("io.rest-assured:json-path:${restAssuredVersion}")
    testImplementation("io.rest-assured:json-schema-validator:${restAssuredVersion}")
    testImplementation("io.rest-assured:spring-mock-mvc:${restAssuredVersion}")
    testImplementation("io.rest-assured:rest-assured-all:${restAssuredVersion}")
}
