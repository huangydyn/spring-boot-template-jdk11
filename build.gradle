buildscript {
    ext {
        springBootVersion = "2.1.13.RELEASE"
        junitVersion = "5.3.0"
        springCloudVersion = "Greenwich.SR5"
    }
    repositories {
        mavenLocal()
        maven { url 'https://maven.aliyun.com/repository/public' }
        maven { url 'http://maven.aliyun.com/nexus/content/repositories/gradle-plugin' }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("net.ltgt.gradle:gradle-apt-plugin:0.18")
    }
}

apply plugin: "pmd"
apply plugin: "java"
apply plugin: "checkstyle"
apply plugin: "net.ltgt.apt"
apply plugin: "net.ltgt.apt-idea"
apply plugin: "maven-publish"
apply plugin: "org.springframework.boot"
apply plugin: "io.spring.dependency-management"
apply plugin: "jacoco"

ext {
    mapstructVersion = "1.3.0.Final"
    lombokVersion = "1.18.4"
    queryDslVersion = '4.1.3'
    restAssuredVersion = '4.1.2'
}

group = "template.app"
version = "1.0"
sourceCompatibility = JavaVersion.VERSION_11

repositories {
    mavenLocal()
    maven { url 'https://maven.aliyun.com/repository/public' }
    maven { url 'https://jitpack.io' }
}

pmd {
    ruleSetFiles = files("config/pmd-ruleSets.xml")
    consoleOutput = true
    toolVersion = "6.9.0"
    sourceSets = [project.sourceSets.main]
    ruleSets = []
}

checkstyle {
    configFile = file("config/checkstyle.xml")
    toolVersion = "8.1"
    sourceSets = [project.sourceSets.main]
}

test {
    useJUnitPlatform()

    testLogging {
        events "PASSED", "FAILED", "SKIPPED"
    }
}

project.afterEvaluate {
    jacoco {
        toolVersion = "0.8.2"
    }

    def sourceFiles = files("./src/main/java")

    def classFiles = files(files("$buildDir/classes/java/main").files.collect {
        fileTree(dir: it, exclude: [
                '**/*Application.class',
                '**/entity/**',
                '**/model/**',
                '**/dto/**',
                '**/mappers/**',
                '**/*DTO.class',
        ])
    })

    project.task(type: JacocoReport, "junitPlatformJacocoReport", {
        sourceDirectories.from = sourceFiles
        classDirectories.from = classFiles
        executionData fileTree("${buildDir}/jacoco", {
            includes = ['**/*.exec']
        })

        reports {
            xml.enabled false
            csv.enabled false
            html.enabled = true
            html.destination file("${buildDir}/reports/jacoco")
        }

    })

    project.task(type: JacocoCoverageVerification, "junitPlatformJacocoCoverageReport", {
        sourceDirectories.from = sourceFiles
        classDirectories.from = classFiles
        executionData fileTree("${buildDir}/jacoco", {
            includes = ['**/*.exec']
        })

        violationRules {
            rule {
                limit {
                    counter = "BRANCH"
                    minimum = 0.00
                }
                limit {
                    counter = "METHOD"
                    minimum = 0.00
                }
                limit {
                    counter = "LINE"
                    minimum = 0.00
                }
                limit {
                    counter = "CLASS"
                    minimum = 0
                }
            }
        }
    })

    test.finalizedBy junitPlatformJacocoReport, junitPlatformJacocoCoverageReport
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile("org.springframework.boot:spring-boot-starter-cache")
    compile("org.springframework.boot:spring-boot-starter-data-redis")
    compile("org.springframework.cloud:spring-cloud-starter-openfeign")
    compile("org.springframework.cloud:spring-cloud-starter-sleuth")
    compile("io.github.openfeign:feign-okhttp:10.2.0")
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-aop")
    compile("org.projectlombok:lombok:${lombokVersion}")
    compile("net.logstash.logback:logstash-logback-encoder:5.2")
    compile("io.springfox:springfox-swagger2:2.9.2")
    compile("io.springfox:springfox-swagger-ui:2.9.2")
    compile("com.google.guava:guava:27.0-jre")
    compile("commons-io:commons-io:2.6")
    compile("javax.validation:validation-api:2.0.1.Final")
    compile("org.javassist:javassist:3.24.0-GA")
    compile("javax.xml.bind:jaxb-api:2.3.1")
    compile("org.mapstruct:mapstruct-jdk8:${mapstructVersion}", "org.projectlombok:lombok:${lombokVersion}")
    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile("org.flywaydb:flyway-core:5.2.1")
    compile("com.querydsl:querydsl-core:${queryDslVersion}")
    compile("com.querydsl:querydsl-jpa:${queryDslVersion}")
    compile("org.apache.commons:commons-lang3:3.9")
    compile("com.fasterxml.jackson.datatype:jackson-datatype-joda:2.10.0")
    compile("org.apache.commons:commons-pool2:2.7.0")

    annotationProcessor(
            "com.querydsl:querydsl-apt:${queryDslVersion}:jpa",
            "org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.2.Final",
            "javax.annotation:javax.annotation-api:1.3.2",
            "org.projectlombok:lombok:${lombokVersion}",
            "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    )

    runtime 'org.postgresql:postgresql:42.2.1'

    testCompile("org.springframework.boot:spring-boot-starter-test")
    testCompile("com.github.sbrannen:spring-test-junit5:1.3.1")
    testCompile("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testCompile("org.junit.jupiter:junit-jupiter-params:${junitVersion}")
    testCompile("org.mockito:mockito-core:2.23.0")
    testRuntime("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
    testRuntime("org.junit.vintage:junit-vintage-engine:${junitVersion}")
    testCompile("io.rest-assured:rest-assured:${restAssuredVersion}")
    testCompile("io.rest-assured:json-path:${restAssuredVersion}")
    testCompile("io.rest-assured:json-schema-validator:${restAssuredVersion}")
    testCompile("io.rest-assured:spring-mock-mvc:${restAssuredVersion}")
    testCompile("io.rest-assured:rest-assured-all:${restAssuredVersion}")
    testCompile 'io.zonky.test:embedded-database-spring-test:1.5.1'
}
